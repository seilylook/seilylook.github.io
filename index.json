[{"categories":["Cyber Security"],"content":" 🌐 IP와 MAC 주소, 해커는 왜 이것부터 확인할까?Kali Linux로 모의 해킹을 진행하거나, 네트워크 보안을 점검할 때 가장 먼저 확인하는 정보 중 하나는 IP 주소와 MAC 주소입니다. 그렇다면 도대체 이 두 가지 정보가 무엇이고, 왜 중요한 걸까요? ","date":"2025-07-04","objectID":"/ip-mac/:0:0","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-ip와-mac-주소-해커는-왜-이것부터-확인할까"},{"categories":["Cyber Security"],"content":" 📌 IP 주소란 무엇인가?","date":"2025-07-04","objectID":"/ip-mac/:1:0","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-ip-주소란-무엇인가"},{"categories":["Cyber Security"],"content":" 🏠 IP 주소 = 인터넷상의 집 주소IP(Internet Protocol) 주소는 네트워크 상에서 장비(컴퓨터, 스마트폰 등)를 식별하는 논리적인 주소입니다. 이 주소를 통해 데이터를 어디로 보낼지 결정합니다. 예를 들어, 누군가에게 편지를 보내려면 집 주소가 필요하겠죠? IP 주소는 네트워크 상에서 그 장비가 어디에 있는지 알려주는 주소입니다. ","date":"2025-07-04","objectID":"/ip-mac/:1:1","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-ip-주소--인터넷상의-집-주소"},{"categories":["Cyber Security"],"content":" ✅ 예시 IPv4: 192.168.0.10, 10.0.0.5 IPv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334 ","date":"2025-07-04","objectID":"/ip-mac/:1:2","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-예시"},{"categories":["Cyber Security"],"content":" 🧭 역할 데이터 전송 시 목적지 지정: 패킷은 IP 주소를 기준으로 이동합니다. 라우팅 가능: 다른 네트워크 간 데이터 전달이 가능함 (MAC 주소는 불가능) ","date":"2025-07-04","objectID":"/ip-mac/:1:3","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-역할"},{"categories":["Cyber Security"],"content":" 🎯 보안/해킹 관점에서 공격자는 대상 시스템의 IP 주소를 식별해야 공격을 시도할 수 있습니다. 내부망/외부망 분리 여부를 판단할 수 있습니다. IP 스푸핑(가짜 IP 사용) 등의 기법도 존재합니다. ","date":"2025-07-04","objectID":"/ip-mac/:1:4","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-보안해킹-관점에서"},{"categories":["Cyber Security"],"content":" 🪪 MAC 주소란 무엇인가?","date":"2025-07-04","objectID":"/ip-mac/:2:0","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-mac-주소란-무엇인가"},{"categories":["Cyber Security"],"content":" 🧬 MAC 주소 = 네트워크 카드의 DNAMAC(Media Access Control) 주소는 네트워크 장비(랜카드 등)의 고유한 물리 주소입니다. 제조 단계에서 부여되며, 보통 바뀌지 않습니다. MAC 주소는 장비에 붙어 있는 주민등록번호 같은 것입니다. ","date":"2025-07-04","objectID":"/ip-mac/:2:1","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-mac-주소--네트워크-카드의-dna"},{"categories":["Cyber Security"],"content":" ✅ 예시 00:1A:2B:3C:4D:5E AA:BB:CC:DD:EE:FF ","date":"2025-07-04","objectID":"/ip-mac/:2:2","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-예시-1"},{"categories":["Cyber Security"],"content":" 🧭 역할 같은 네트워크(로컬 네트워크)에서 장비 식별 이더넷, Wi-Fi 등에서 통신 시 사용 IP 주소는 바뀔 수 있지만, MAC 주소는 기본적으로 고정되어 있습니다. ","date":"2025-07-04","objectID":"/ip-mac/:2:3","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-역할-1"},{"categories":["Cyber Security"],"content":" 🔍 IP와 MAC의 차이 정리 항목 IP 주소 MAC 주소 정의 네트워크 상의 논리적 주소 네트워크 장비의 물리적 주소 범위 전 세계 어디든 전송 가능 로컬 네트워크 내에서만 유효 변경 가능성 쉽게 바뀔 수 있음 (동적 할당 등) 거의 바뀌지 않음 (수동 변경 가능) 예시 192.168.1.5 00:0a:95:9d:68:16 목적 데이터가 어디로 갈지 결정 실제 어떤 장비에 전달할지 결정 ","date":"2025-07-04","objectID":"/ip-mac/:3:0","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-ip와-mac의-차이-정리"},{"categories":["Cyber Security"],"content":" 🧠 해커 관점에서 IP/MAC이 중요한 이유","date":"2025-07-04","objectID":"/ip-mac/:4:0","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-해커-관점에서-ipmac이-중요한-이유"},{"categories":["Cyber Security"],"content":" ✅ 1. 공격 대상 식별 모의 해커는 네트워크에 연결된 장비들을 스캔한 후, IP 주소와 MAC 주소를 확인합니다. 이를 통해 운영 체제(OS), 장비 유형, 벤더 정보까지 추측할 수 있습니다. 예: bash # ARP 스캔으로 IP-MAC 테이블 확인 sudo arp-scan -l ","date":"2025-07-04","objectID":"/ip-mac/:4:1","series":null,"tags":["IP","MAC"],"title":"IP \u0026 MAC","uri":"/ip-mac/#-1-공격-대상-식별"},{"categories":["Cyber Security"],"content":" 🔍 포트 정보 수집이 왜 중요할까?Kali Linux를 활용한 모의 해킹(Penetration Testing)이나 침투 테스트에서 가장 기본이자 중요한 단계 중 하나는 **포트 스캐닝(port scanning)**입니다. 그런데 그 전에 먼저, “포트(port)“가 무엇인지 정확히 알고 넘어가는 게 중요하겠죠? ","date":"2025-07-04","objectID":"/port/:0:0","series":null,"tags":["Port"],"title":"Port","uri":"/port/#-포트-정보-수집이-왜-중요할까"},{"categories":["Cyber Security"],"content":" 🚪 포트(Port)란 무엇인가?","date":"2025-07-04","objectID":"/port/:1:0","series":null,"tags":["Port"],"title":"Port","uri":"/port/#-포트port란-무엇인가"},{"categories":["Cyber Security"],"content":" 📫 IP 주소는 집 주소, 포트는 문(door)컴퓨터 간 통신은 IP 주소와 포트 번호를 통해 이루어집니다. IP 주소: 한 대의 컴퓨터(혹은 장비)를 식별하는 주소 (예: 192.168.0.10) 포트 번호: 그 컴퓨터 안에서 실행 중인 **특정 서비스(프로그램)**를 식별하는 번호 예를 들어, 당신이 한 집에 여러 개의 방(서비스)이 있다고 생각해보세요. 택배는 집 주소(IP)만으로는 정확히 어디에 둘지 알 수 없죠. 포트 번호는 각 방에 해당하는 문 번호입니다. ","date":"2025-07-04","objectID":"/port/:1:1","series":null,"tags":["Port"],"title":"Port","uri":"/port/#-ip-주소는-집-주소-포트는-문door"},{"categories":["Cyber Security"],"content":" 📦 실제 예시 포트 번호 서비스 설명 21 FTP 파일 전송 프로토콜 22 SSH 원격 접속 (터미널) 80 HTTP 일반 웹 서비스 443 HTTPS 보안 웹 서비스 (SSL/TLS) 3306 MySQL 데이터베이스 접속용 포트 운영 체제는 포트 번호(0~65535)를 기준으로 수많은 서비스를 구분하고 관리합니다. ","date":"2025-07-04","objectID":"/port/:1:2","series":null,"tags":["Port"],"title":"Port","uri":"/port/#-실제-예시"},{"categories":["Cyber Security"],"content":" 📌 포트 정보 수집이 중요한 이유포트는 단순한 숫자가 아닙니다. 포트가 열려 있다는 건, 그 시스템이 외부와 통신할 수 있는 문이 열려 있다는 뜻입니다. ","date":"2025-07-04","objectID":"/port/:2:0","series":null,"tags":["Port"],"title":"Port","uri":"/port/#-포트-정보-수집이-중요한-이유"},{"categories":["Cyber Security"],"content":" 1. 서비스 식별 (Service Fingerprinting)열린 포트를 통해 어떤 서비스가 실행 중인지 파악할 수 있습니다. 예: 22번 포트가 열려 있다면 SSH 접속이 가능할 수 있습니다. nmap 같은 도구는 버전까지 식별해줍니다 → 이를 통해 취약한 버전인지 확인 가능 ","date":"2025-07-04","objectID":"/port/:2:1","series":null,"tags":["Port"],"title":"Port","uri":"/port/#1-서비스-식별-service-fingerprinting"},{"categories":["Cyber Security"],"content":" 2. 취약점 분석 및 공격 경로 탐색오래된 소프트웨어나 설정이 잘못된 서비스가 열린 포트를 통해 외부에 노출되면? → 공격자가 그 포트를 통해 시스템을 침투할 수 있습니다. Apache 2.2가 80번 포트에서 동작 중 → 이미 공개된 취약점이 있을 수 있음 MySQL이 외부 포트로 열려 있음 → 무차별 대입 공격 시도 가능 ","date":"2025-07-04","objectID":"/port/:2:2","series":null,"tags":["Port"],"title":"Port","uri":"/port/#2-취약점-분석-및-공격-경로-탐색"},{"categories":["Cyber Security"],"content":" 3. 방화벽 우회 및 내부 진입일부 포트는 방화벽에 의해 허용되어 있는 경우가 있습니다. 이 포트를 활용해 내부 네트워크로 들어가거나, 다른 시스템으로 이동하는 수평 이동 lateral movement이 가능합니다. ","date":"2025-07-04","objectID":"/port/:2:3","series":null,"tags":["Port"],"title":"Port","uri":"/port/#3-방화벽-우회-및-내부-진입"},{"categories":["Cyber Security"],"content":" 4. 공격 벡터(공격 경로) 분석포트가 열려 있고, 해당 서비스가 취약하거나 잘못 구성되어 있으면? → 공격자는 그것을 공격 벡터로 삼을 수 있습니다. FTP(21번) 서비스가 익명 로그인 허용 → 파일 업로드/다운로드 가능 SMB(445번) 서비스가 열려 있음 → EternalBlue 같은 악명 높은 공격 가능 ","date":"2025-07-04","objectID":"/port/:2:4","series":null,"tags":["Port"],"title":"Port","uri":"/port/#4-공격-벡터공격-경로-분석"},{"categories":["Cyber Security"],"content":" 5. 정보 수집은 침투 테스트의 시작 포트 스캔은 건물의 모든 문을 두드려보고, 어디가 열려 있는지를 확인하는 작업입니다. 열린 포트를 통해: 실행 중인 서비스 정보 운영 체제 추정 방화벽 설정 여부 기타 인프라 구조 등 다양한 정보를 간접적으로 수집할 수 있습니다. ","date":"2025-07-04","objectID":"/port/:2:5","series":null,"tags":["Port"],"title":"Port","uri":"/port/#5-정보-수집은-침투-테스트의-시작"},{"categories":["Cyber Security"],"content":" 🛠 Kali Linux에서 사용하는 대표적인 도구들 도구 설명 nmap 대표적인 포트 스캐너 (서비스 식별 가능) masscan 초고속 포트 스캐너 netcat (nc) 포트 연결 및 테스트 도구 enum4linux, nikto, gobuster 열린 포트 기반 서비스에 대한 정보 수집 ","date":"2025-07-04","objectID":"/port/:3:0","series":null,"tags":["Port"],"title":"Port","uri":"/port/#-kali-linux에서-사용하는-대표적인-도구들"},{"categories":["Cyber Security"],"content":" 🧪 예시 흐름 (nmap 활용) bash # 1. 전체 포트 스캔 nmap -sS -p- \u003c타겟 IP\u003e # 2. 열린 포트의 서비스 및 버전 식별 nmap -sV -p \u003c열린 포트 목록\u003e \u003c타겟 IP\u003e # 3. 탐색된 서비스 버전에 맞는 취약점 검색 searchsploit \u003c서비스명\u003e ","date":"2025-07-04","objectID":"/port/:4:0","series":null,"tags":["Port"],"title":"Port","uri":"/port/#-예시-흐름-nmap-활용"},{"categories":["Cyber Security"],"content":" VPN 완벽 가이드: 네트워크 보안의 핵심 기술","date":"2025-07-03","objectID":"/vpn/:0:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#vpn-완벽-가이드-네트워크-보안의-핵심-기술"},{"categories":["Cyber Security"],"content":" 들어가며VPN(Virtual Private Network)은 현대 네트워크 보안의 핵심 기술로, 원격 근무가 일반화된 오늘날 더욱 중요해지고 있습니다. 이 글에서는 VPN의 기본 개념부터 실제 구현까지, 개발자가 알아야 할 모든 것을 다루겠습니다. ","date":"2025-07-03","objectID":"/vpn/:1:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#들어가며"},{"categories":["Cyber Security"],"content":" VPN이란?VPN(Virtual Private Network)은 공공 네트워크(인터넷)를 통해 사설 네트워크를 확장하여, 마치 사설 네트워크에 직접 연결된 것처럼 안전한 통신을 가능하게 하는 기술입니다. ","date":"2025-07-03","objectID":"/vpn/:2:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#vpn이란"},{"categories":["Cyber Security"],"content":" 핵심 개념 가상화: 물리적으로 분리된 네트워크를 논리적으로 연결 암호화: 데이터 전송 시 암호화를 통한 보안 보장 터널링: 암호화된 데이터를 안전한 터널을 통해 전송 인증: 접속 사용자의 신원 확인 ","date":"2025-07-03","objectID":"/vpn/:2:1","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#핵심-개념"},{"categories":["Cyber Security"],"content":" VPN의 작동 원리","date":"2025-07-03","objectID":"/vpn/:3:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#vpn의-작동-원리"},{"categories":["Cyber Security"],"content":" 기본 구조 text 클라이언트 ←→ [암호화 터널] ←→ VPN 서버 ←→ 대상 서버 | | | 공공 네트워크 (인터넷) | |____________________________________| ","date":"2025-07-03","objectID":"/vpn/:3:1","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#기본-구조"},{"categories":["Cyber Security"],"content":" 터널링 과정 연결 설정: 클라이언트가 VPN 서버에 연결 요청 인증: 사용자 인증 및 권한 확인 터널 생성: 암호화된 터널 생성 데이터 전송: 모든 데이터가 암호화되어 전송 연결 종료: 세션 종료 및 터널 해제 ","date":"2025-07-03","objectID":"/vpn/:3:2","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#터널링-과정"},{"categories":["Cyber Security"],"content":" VPN의 종류","date":"2025-07-03","objectID":"/vpn/:4:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#vpn의-종류"},{"categories":["Cyber Security"],"content":" 1. Site-to-Site VPN두 개 이상의 네트워크를 안전하게 연결하는 VPN입니다. 특징 지점 간 영구적 연결 라우터 또는 방화벽 레벨에서 구성 사용자 개입 없이 자동 연결 IPSec을 이용한 Site-to-Site VPN 설정 예제 bash # /etc/ipsec.conf (StrongSwan 설정) config setup charondebug=\"ike 1, knl 1, cfg 0\" uniqueids=no conn %default ikelifetime=60m keylife=20m rekeymargin=3m keyingtries=1 keyexchange=ikev2 authby=secret conn site-to-site left=203.0.113.1 # 본사 공인 IP leftsubnet=192.168.1.0/24 # 본사 내부 네트워크 right=203.0.113.2 # 지점 공인 IP rightsubnet=192.168.2.0/24 # 지점 내부 네트워크 ike=aes256-sha256-modp2048! esp=aes256-sha256! auto=start bash # /etc/ipsec.secrets 203.0.113.1 203.0.113.2 : PSK \"your-pre-shared-key-here\" ","date":"2025-07-03","objectID":"/vpn/:4:1","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#1-site-to-site-vpn"},{"categories":["Cyber Security"],"content":" 1. Site-to-Site VPN두 개 이상의 네트워크를 안전하게 연결하는 VPN입니다. 특징 지점 간 영구적 연결 라우터 또는 방화벽 레벨에서 구성 사용자 개입 없이 자동 연결 IPSec을 이용한 Site-to-Site VPN 설정 예제 bash # /etc/ipsec.conf (StrongSwan 설정) config setup charondebug=\"ike 1, knl 1, cfg 0\" uniqueids=no conn %default ikelifetime=60m keylife=20m rekeymargin=3m keyingtries=1 keyexchange=ikev2 authby=secret conn site-to-site left=203.0.113.1 # 본사 공인 IP leftsubnet=192.168.1.0/24 # 본사 내부 네트워크 right=203.0.113.2 # 지점 공인 IP rightsubnet=192.168.2.0/24 # 지점 내부 네트워크 ike=aes256-sha256-modp2048! esp=aes256-sha256! auto=start bash # /etc/ipsec.secrets 203.0.113.1 203.0.113.2 : PSK \"your-pre-shared-key-here\" ","date":"2025-07-03","objectID":"/vpn/:4:1","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#특징"},{"categories":["Cyber Security"],"content":" 1. Site-to-Site VPN두 개 이상의 네트워크를 안전하게 연결하는 VPN입니다. 특징 지점 간 영구적 연결 라우터 또는 방화벽 레벨에서 구성 사용자 개입 없이 자동 연결 IPSec을 이용한 Site-to-Site VPN 설정 예제 bash # /etc/ipsec.conf (StrongSwan 설정) config setup charondebug=\"ike 1, knl 1, cfg 0\" uniqueids=no conn %default ikelifetime=60m keylife=20m rekeymargin=3m keyingtries=1 keyexchange=ikev2 authby=secret conn site-to-site left=203.0.113.1 # 본사 공인 IP leftsubnet=192.168.1.0/24 # 본사 내부 네트워크 right=203.0.113.2 # 지점 공인 IP rightsubnet=192.168.2.0/24 # 지점 내부 네트워크 ike=aes256-sha256-modp2048! esp=aes256-sha256! auto=start bash # /etc/ipsec.secrets 203.0.113.1 203.0.113.2 : PSK \"your-pre-shared-key-here\" ","date":"2025-07-03","objectID":"/vpn/:4:1","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#ipsec을-이용한-site-to-site-vpn-설정-예제"},{"categories":["Cyber Security"],"content":" 2. Remote Access VPN개별 사용자가 원격에서 기업 네트워크에 접속하는 VPN입니다. 특징 개별 사용자 인증 클라이언트 소프트웨어 필요 동적 IP 할당 OpenVPN 서버 설정 예제 bash # /etc/openvpn/server.conf port 1194 proto udp dev tun # 인증서 파일 ca ca.crt cert server.crt key server.key dh dh.pem # 가상 네트워크 설정 server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt # 클라이언트에게 라우팅 정보 전달 push \"route 192.168.1.0 255.255.255.0\" push \"dhcp-option DNS 8.8.8.8\" push \"dhcp-option DNS 8.8.4.4\" # 보안 설정 cipher AES-256-CBC auth SHA256 tls-auth ta.key 0 key-direction 0 # 연결 유지 keepalive 10 120 comp-lzo persist-key persist-tun # 권한 설정 user nobody group nobody # 로그 설정 status openvpn-status.log log-append /var/log/openvpn.log verb 3 ","date":"2025-07-03","objectID":"/vpn/:4:2","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#2-remote-access-vpn"},{"categories":["Cyber Security"],"content":" 2. Remote Access VPN개별 사용자가 원격에서 기업 네트워크에 접속하는 VPN입니다. 특징 개별 사용자 인증 클라이언트 소프트웨어 필요 동적 IP 할당 OpenVPN 서버 설정 예제 bash # /etc/openvpn/server.conf port 1194 proto udp dev tun # 인증서 파일 ca ca.crt cert server.crt key server.key dh dh.pem # 가상 네트워크 설정 server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt # 클라이언트에게 라우팅 정보 전달 push \"route 192.168.1.0 255.255.255.0\" push \"dhcp-option DNS 8.8.8.8\" push \"dhcp-option DNS 8.8.4.4\" # 보안 설정 cipher AES-256-CBC auth SHA256 tls-auth ta.key 0 key-direction 0 # 연결 유지 keepalive 10 120 comp-lzo persist-key persist-tun # 권한 설정 user nobody group nobody # 로그 설정 status openvpn-status.log log-append /var/log/openvpn.log verb 3 ","date":"2025-07-03","objectID":"/vpn/:4:2","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#특징-1"},{"categories":["Cyber Security"],"content":" 2. Remote Access VPN개별 사용자가 원격에서 기업 네트워크에 접속하는 VPN입니다. 특징 개별 사용자 인증 클라이언트 소프트웨어 필요 동적 IP 할당 OpenVPN 서버 설정 예제 bash # /etc/openvpn/server.conf port 1194 proto udp dev tun # 인증서 파일 ca ca.crt cert server.crt key server.key dh dh.pem # 가상 네트워크 설정 server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt # 클라이언트에게 라우팅 정보 전달 push \"route 192.168.1.0 255.255.255.0\" push \"dhcp-option DNS 8.8.8.8\" push \"dhcp-option DNS 8.8.4.4\" # 보안 설정 cipher AES-256-CBC auth SHA256 tls-auth ta.key 0 key-direction 0 # 연결 유지 keepalive 10 120 comp-lzo persist-key persist-tun # 권한 설정 user nobody group nobody # 로그 설정 status openvpn-status.log log-append /var/log/openvpn.log verb 3 ","date":"2025-07-03","objectID":"/vpn/:4:2","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#openvpn-서버-설정-예제"},{"categories":["Cyber Security"],"content":" 3. Client-to-Site VPN클라이언트가 특정 사이트나 서비스에 직접 연결하는 VPN입니다. ","date":"2025-07-03","objectID":"/vpn/:4:3","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#3-client-to-site-vpn"},{"categories":["Cyber Security"],"content":" VPN 프로토콜 비교","date":"2025-07-03","objectID":"/vpn/:5:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#vpn-프로토콜-비교"},{"categories":["Cyber Security"],"content":" 1. OpenVPN python # Python을 이용한 OpenVPN 클라이언트 관리 import subprocess import os import configparser class OpenVPNClient: def __init__(self, config_file): self.config_file = config_file self.process = None self.is_connected = False def connect(self): \"\"\"OpenVPN 연결 시작\"\"\" try: cmd = ['openvpn', '--config', self.config_file, '--daemon'] self.process = subprocess.Popen( cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE ) self.is_connected = True return True except Exception as e: print(f\"VPN 연결 실패: {e}\") return False def disconnect(self): \"\"\"VPN 연결 해제\"\"\" if self.process: self.process.terminate() self.process.wait() self.is_connected = False def get_status(self): \"\"\"연결 상태 확인\"\"\" if not self.is_connected: return \"Disconnected\" try: # OpenVPN 상태 파일 읽기 with open('/var/run/openvpn/openvpn-status.log', 'r') as f: lines = f.readlines() for line in lines: if 'CLIENT_LIST' in line: return \"Connected\" return \"Connecting\" except FileNotFoundError: return \"Status Unknown\" # 사용 예제 vpn = OpenVPNClient('/etc/openvpn/client.conf') vpn.connect() print(f\"VPN 상태: {vpn.get_status()}\") ","date":"2025-07-03","objectID":"/vpn/:5:1","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#1-openvpn"},{"categories":["Cyber Security"],"content":" 2. IPSec bash # IPSec VPN 자동 설정 스크립트 #!/bin/bash # 변수 설정 LOCAL_IP=\"192.168.1.100\" REMOTE_IP=\"203.0.113.50\" SHARED_KEY=\"your-shared-key\" LOCAL_SUBNET=\"192.168.1.0/24\" REMOTE_SUBNET=\"192.168.2.0/24\" # IPSec 설정 cat \u003e /etc/ipsec.conf \u003c\u003c EOF conn tunnel left=$LOCAL_IP leftsubnet=$LOCAL_SUBNET right=$REMOTE_IP rightsubnet=$REMOTE_SUBNET keyexchange=ikev2 ike=aes256-sha256-modp2048! esp=aes256-sha256! authby=secret auto=start EOF # 공유키 설정 cat \u003e /etc/ipsec.secrets \u003c\u003c EOF $LOCAL_IP $REMOTE_IP : PSK \"$SHARED_KEY\" EOF # 서비스 시작 systemctl enable ipsec systemctl start ipsec echo \"IPSec VPN 설정이 완료되었습니다.\" ","date":"2025-07-03","objectID":"/vpn/:5:2","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#2-ipsec"},{"categories":["Cyber Security"],"content":" 3. WireGuard bash # WireGuard 설정 및 자동화 #!/bin/bash # 서버 설정 cat \u003e /etc/wireguard/wg0.conf \u003c\u003c EOF [Interface] Address = 10.0.0.1/24 ListenPort = 51820 PrivateKey = $(wg genkey) PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE [Peer] PublicKey = CLIENT_PUBLIC_KEY AllowedIPs = 10.0.0.2/32 EOF # 클라이언트 설정 cat \u003e /etc/wireguard/client.conf \u003c\u003c EOF [Interface] Address = 10.0.0.2/32 PrivateKey = $(wg genkey) DNS = 8.8.8.8 [Peer] PublicKey = SERVER_PUBLIC_KEY Endpoint = SERVER_IP:51820 AllowedIPs = 0.0.0.0/0 PersistentKeepalive = 25 EOF # 서비스 시작 systemctl enable wg-quick@wg0 systemctl start wg-quick@wg0 ","date":"2025-07-03","objectID":"/vpn/:5:3","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#3-wireguard"},{"categories":["Cyber Security"],"content":" VPN 성능 최적화","date":"2025-07-03","objectID":"/vpn/:6:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#vpn-성능-최적화"},{"categories":["Cyber Security"],"content":" 1. 프로토콜 최적화 javascript // Node.js를 이용한 VPN 연결 성능 모니터링 const { exec } = require('child_process'); const fs = require('fs'); class VPNMonitor { constructor() { this.metrics = { latency: [], throughput: [], packetLoss: [] }; } async measureLatency(target = '8.8.8.8') { return new Promise((resolve, reject) =\u003e { exec(`ping -c 4 ${target}`, (error, stdout, stderr) =\u003e { if (error) { reject(error); return; } const matches = stdout.match(/time=(\\d+\\.?\\d*)/g); if (matches) { const latencies = matches.map(m =\u003e parseFloat(m.split('=')[1])); const avgLatency = latencies.reduce((a, b) =\u003e a + b) / latencies.length; this.metrics.latency.push({ timestamp: new Date(), value: avgLatency }); resolve(avgLatency); } else { reject(new Error('핑 결과 파싱 실패')); } }); }); } async measureThroughput(server = 'speedtest.net') { return new Promise((resolve, reject) =\u003e { exec('speedtest-cli --json', (error, stdout, stderr) =\u003e { if (error) { reject(error); return; } try { const result = JSON.parse(stdout); const throughput = { download: result.download / 1000000, // Mbps upload: result.upload / 1000000 // Mbps }; this.metrics.throughput.push({ timestamp: new Date(), value: throughput }); resolve(throughput); } catch (e) { reject(e); } }); }); } generateReport() { const report = { avgLatency: this.getAverageLatency(), avgThroughput: this.getAverageThroughput(), recommendedProtocol: this.getRecommendedProtocol() }; fs.writeFileSync('vpn-performance-report.json', JSON.stringify(report, null, 2)); return report; } getAverageLatency() { if (this.metrics.latency.length === 0) return 0; return this.metrics.latency.reduce((sum, m) =\u003e sum + m.value, 0) / this.metrics.latency.length; } getAverageThroughput() { if (this.metrics.throughput.length === 0) return { download: 0, upload: 0 }; const totalDownload = this.metrics.throughput.reduce((sum, m) =\u003e sum + m.value.download, 0); const totalUpload = this.metrics.throughput.reduce((sum, m) =\u003e sum + m.value.upload, 0); return { download: totalDownload / this.metrics.throughput.length, upload: totalUpload / this.metrics.throughput.length }; } getRecommendedProtocol() { const avgLatency = this.getAverageLatency(); const avgThroughput = this.getAverageThroughput(); if (avgLatency \u003c 50 \u0026\u0026 avgThroughput.download \u003e 100) { return 'WireGuard'; // 최고 성능 } else if (avgLatency \u003c 100) { return 'OpenVPN'; // 안정성과 성능의 균형 } else { return 'IPSec'; // 보안 중시 } } } // 사용 예제 const monitor = new VPNMonitor(); async function runPerformanceTest() { try { console.log('VPN 성능 테스트 시작...'); const latency = await monitor.measureLatency(); console.log(`평균 지연시간: ${latency.toFixed(2)}ms`); const throughput = await monitor.measureThroughput(); console.log(`다운로드 속도: ${throughput.download.toFixed(2)} Mbps`); console.log(`업로드 속도: ${throughput.upload.toFixed(2)} Mbps`); const report = monitor.generateReport(); console.log(`권장 프로토콜: ${report.recommendedProtocol}`); } catch (error) { console.error('성능 테스트 실패:', error); } } runPerformanceTest(); ","date":"2025-07-03","objectID":"/vpn/:6:1","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#1-프로토콜-최적화"},{"categories":["Cyber Security"],"content":" 2. 네트워크 최적화 python # VPN 네트워크 최적화 스크립트 import subprocess import json import time class VPNOptimizer: def __init__(self): self.current_config = {} self.optimal_config = {} def optimize_tcp_settings(self): \"\"\"TCP 설정 최적화\"\"\" tcp_optimizations = { 'net.core.rmem_max': '16777216', 'net.core.wmem_max': '16777216', 'net.ipv4.tcp_rmem': '4096 87380 16777216', 'net.ipv4.tcp_wmem': '4096 16384 16777216', 'net.ipv4.tcp_congestion_control': 'bbr', 'net.core.netdev_max_backlog': '5000', 'net.ipv4.tcp_mtu_probing': '1' } for key, value in tcp_optimizations.items(): cmd = f'sysctl -w {key}={value}' subprocess.run(cmd, shell=True) print(f\"설정 적용: {key} = {value}\") def optimize_vpn_mtu(self, interface='tun0'): \"\"\"VPN MTU 최적화\"\"\" # MTU 탐지 for mtu in range(1500, 1200, -50): cmd = f'ping -M do -s {mtu-28} -c 1 8.8.8.8' result = subprocess.run(cmd, shell=True, capture_output=True) if result.returncode == 0: # 최적 MTU 설정 subprocess.run(f'ip link set dev {interface} mtu {mtu}', shell=True) print(f\"최적 MTU 설정: {mtu}\") return mtu print(\"MTU 최적화 실패\") return None def setup_qos(self, interface='eth0'): \"\"\"QoS 설정으로 VPN 트래픽 우선순위 조정\"\"\" qos_commands = [ f'tc qdisc add dev {interface} root handle 1: htb default 30', f'tc class add dev {interface} parent 1: classid 1:1 htb rate 100mbit', f'tc class add dev {interface} parent 1:1 classid 1:10 htb rate 30mbit ceil 100mbit', f'tc class add dev {interface} parent 1:1 classid 1:20 htb rate 60mbit ceil 100mbit', f'tc class add dev {interface} parent 1:1 classid 1:30 htb rate 10mbit ceil 100mbit', # VPN 트래픽 우선순위 설정 f'tc filter add dev {interface} protocol ip parent 1:0 prio 1 u32 match ip dport 1194 0xffff flowid 1:10', f'tc filter add dev {interface} protocol ip parent 1:0 prio 1 u32 match ip sport 1194 0xffff flowid 1:10' ] for cmd in qos_commands: subprocess.run(cmd, shell=True) print(\"QoS 설정 완료\") def monitor_and_adjust(self): \"\"\"실시간 모니터링 및 자동 조정\"\"\" while True: # 대역폭 사용량 체크 bandwidth_usage = self.get_bandwidth_usage() if bandwidth_usage \u003e 80: # 80% 이상 사용 시 self.adjust_compression() self.adjust_keepalive() time.sleep(30) # 30초마다 체크 def get_bandwidth_usage(self): \"\"\"대역폭 사용량 조회\"\"\" cmd = \"cat /proc/net/dev | grep tun0\" result = subprocess.run(cmd, shell=True, capture_output=True, text=True) if result.returncode == 0: line = result.stdout.strip() fields = line.split() rx_bytes = int(fields[1]) tx_bytes = int(fields[9]) # 간단한 사용량 계산 (실제로는 더 복잡한 로직 필요) return min(100, (rx_bytes + tx_bytes) / 1000000) # MB 단위 return 0 def adjust_compression(self): \"\"\"압축 설정 조정\"\"\" print(\"높은 대역폭 사용량 감지 - 압축 설정 조정\") # OpenVPN 설정 파일 수정 with open('/etc/openvpn/server.conf', 'r') as f: config = f.read() if 'comp-lzo' not in config: config += '\\ncomp-lzo\\n' with open('/etc/openvpn/server.conf', 'w') as f: f.write(config) def adjust_keepalive(self): \"\"\"keepalive 설정 조정\"\"\" print(\"keepalive 설정 최적화\") # 네트워크 상태에 따라 keepalive 간격 조정 # 사용 예제 optimizer = VPNOptimizer() optimizer.optimize_tcp_settings() optimizer.optimize_vpn_mtu() optimizer.setup_qos() ","date":"2025-07-03","objectID":"/vpn/:6:2","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#2-네트워크-최적화"},{"categories":["Cyber Security"],"content":" 보안 고려사항","date":"2025-07-03","objectID":"/vpn/:7:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#보안-고려사항"},{"categories":["Cyber Security"],"content":" 1. 인증서 관리 bash # PKI 인증서 자동 관리 스크립트 #!/bin/bash # Easy-RSA를 이용한 PKI 구축 setup_pki() { echo \"PKI 환경 설정 시작...\" # Easy-RSA 초기화 ./easyrsa init-pki # CA 인증서 생성 ./easyrsa build-ca nopass # 서버 인증서 생성 ./easyrsa gen-req server nopass ./easyrsa sign-req server server # DH 파라미터 생성 ./easyrsa gen-dh # TLS 인증키 생성 openvpn --genkey --secret ta.key echo \"PKI 설정 완료\" } # 클라이언트 인증서 생성 generate_client_cert() { CLIENT_NAME=$1 if [ -z \"$CLIENT_NAME\" ]; then echo \"사용법: generate_client_cert \u003cclient_name\u003e\" return 1 fi echo \"클라이언트 인증서 생성: $CLIENT_NAME\" # 클라이언트 요청 생성 ./easyrsa gen-req $CLIENT_NAME nopass # 클라이언트 인증서 서명 ./easyrsa sign-req client $CLIENT_NAME # 클라이언트 설정 파일 생성 create_client_config $CLIENT_NAME echo \"클라이언트 인증서 생성 완료: $CLIENT_NAME\" } # 클라이언트 설정 파일 생성 create_client_config() { CLIENT_NAME=$1 cat \u003e ${CLIENT_NAME}.ovpn \u003c\u003c EOF client dev tun proto udp remote YOUR_SERVER_IP 1194 resolv-retry infinite nobind persist-key persist-tun remote-cert-tls server cipher AES-256-CBC auth SHA256 key-direction 1 verb 3 \u003cca\u003e $(cat pki/ca.crt) \u003c/ca\u003e \u003ccert\u003e $(cat pki/issued/${CLIENT_NAME}.crt) \u003c/cert\u003e \u003ckey\u003e $(cat pki/private/${CLIENT_NAME}.key) \u003c/key\u003e \u003ctls-auth\u003e $(cat ta.key) \u003c/tls-auth\u003e EOF } # 인증서 만료 체크 check_cert_expiry() { CERT_FILE=$1 DAYS_BEFORE_EXPIRY=30 if [ -f \"$CERT_FILE\" ]; then EXPIRY_DATE=$(openssl x509 -enddate -noout -in \"$CERT_FILE\" | cut -d= -f2) EXPIRY_TIMESTAMP=$(date -d \"$EXPIRY_DATE\" +%s) CURRENT_TIMESTAMP=$(date +%s) DAYS_UNTIL_EXPIRY=$(( (EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 )) if [ $DAYS_UNTIL_EXPIRY -lt $DAYS_BEFORE_EXPIRY ]; then echo \"경고: 인증서 $CERT_FILE 이 $DAYS_UNTIL_EXPIRY 일 후 만료됩니다!\" return 1 else echo \"인증서 $CERT_FILE 는 $DAYS_UNTIL_EXPIRY 일 후 만료됩니다.\" return 0 fi else echo \"오류: 인증서 파일 $CERT_FILE 을 찾을 수 없습니다.\" return 1 fi } # 자동 인증서 갱신 auto_renew_certs() { echo \"인증서 자동 갱신 시작...\" for cert_file in pki/issued/*.crt; do if ! check_cert_expiry \"$cert_file\"; then client_name=$(basename \"$cert_file\" .crt) echo \"인증서 갱신 중: $client_name\" # 기존 인증서 백업 cp \"$cert_file\" \"${cert_file}.backup.$(date +%Y%m%d)\" # 새 인증서 생성 ./easyrsa revoke \"$client_name\" ./easyrsa gen-crl generate_client_cert \"$client_name\" echo \"인증서 갱신 완료: $client_name\" fi done echo \"인증서 자동 갱신 완료\" } ","date":"2025-07-03","objectID":"/vpn/:7:1","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#1-인증서-관리"},{"categories":["Cyber Security"],"content":" 2. 방화벽 및 접근 제어 python # VPN 접근 제어 시스템 import ipaddress import json import sqlite3 from datetime import datetime, timedelta class VPNAccessControl: def __init__(self, db_path='vpn_access.db'): self.db_path = db_path self.init_database() def init_database(self): \"\"\"데이터베이스 초기화\"\"\" conn = sqlite3.connect(self.db_path) cursor = conn.cursor() cursor.execute(''' CREATE TABLE IF NOT EXISTS users ( id INTEGER PRIMARY KEY, username TEXT UNIQUE NOT NULL, client_cert TEXT NOT NULL, allowed_ips TEXT, max_connections INTEGER DEFAULT 1, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, is_active BOOLEAN DEFAULT TRUE ) ''') cursor.execute(''' CREATE TABLE IF NOT EXISTS access_logs ( id INTEGER PRIMARY KEY, username TEXT NOT NULL, client_ip TEXT NOT NULL, action TEXT NOT NULL, timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, details TEXT ) ''') conn.commit() conn.close() def add_user(self, username, client_cert, allowed_ips=None, max_connections=1): \"\"\"사용자 추가\"\"\" conn = sqlite3.connect(self.db_path) cursor = conn.cursor() try: cursor.execute( 'INSERT INTO users (username, client_cert, allowed_ips, max_connections) VALUES (?, ?, ?, ?)', (username, client_cert, allowed_ips, max_connections) ) conn.commit() return True except sqlite3.IntegrityError: return False finally: conn.close() def check_ip_access(self, username, client_ip): \"\"\"IP 접근 권한 확인\"\"\" conn = sqlite3.connect(self.db_path) cursor = conn.cursor() cursor.execute( 'SELECT allowed_ips FROM users WHERE username = ? AND is_active = TRUE', (username,) ) result = cursor.fetchone() conn.close() if not result or not result[0]: return True # 제한이 없으면 허용 allowed_networks = result[0].split(',') client_ip_obj = ipaddress.ip_address(client_ip) for network in allowed_networks: if client_ip_obj in ipaddress.ip_network(network.strip()): return True return False def check_connection_limit(self, username): \"\"\"동시 연결 제한 확인\"\"\" conn = sqlite3.connect(self.db_path) cursor = conn.cursor() # 최대 연결 수 조회 cursor.execute( 'SELECT max_connections FROM users WHERE username = ?', (username,) ) result = cursor.fetchone() if not result: conn.close() return False max_connections = result[0] # 현재 활성 연결 수 조회 (최근 5분 내) five_minutes_ago = datetime.now() - timedelta(minutes=5) cursor.execute( 'SELECT COUNT(*) FROM access_logs WHERE username = ? AND action = \"connect\" AND timestamp \u003e ?', (username, five_minutes_ago) ) current_connections = cursor.fetchone()[0] conn.close() return current_connections \u003c max_connections def log_access(self, username, client_ip, action, details=None): \"\"\"접근 로그 기록\"\"\" conn = sqlite3.connect(self.db_path) cursor = conn.cursor() cursor.execute( 'INSERT INTO access_logs (username, client_ip, action, details) VALUES (?, ?, ?, ?)', (username, client_ip, action, details) ) conn.commit() conn.close() def get_user_activity(self, username, days=7): \"\"\"사용자 활동 조회\"\"\" conn = sqlite3.connect(self.db_path) cursor = conn.cursor() since_date = datetime.now() - timedelta(days=days) cursor.execute( 'SELECT * FROM access_logs WHERE username = ? AND timestamp \u003e ? ORDER BY timestamp DESC', (username, since_date) ) results = cursor.fetchall() conn.close() return results def generate_access_report(self): \"\"\"접근 보고서 생성\"\"\" conn = sqlite3.connect(self.db_path) cursor = conn.cursor() # 활성 사용자 수 cursor.execute('SELECT COUNT(*) FROM users WHERE is_active = TRUE') active_users = cursor.fetchone()[0] # 최근 24시간 접근 수 yesterday = datetime.now() - timedelta(days=1) cursor.execute( 'SELECT COUNT(*) FROM access_logs WHERE timestamp \u003e ? AND action = \"connect\"', (yesterday,) ) recent_connections = cursor.fetchone()[0] # 상위 접근 IP cursor.execute(''' SELECT client_ip, COUNT(*) as count FROM access_logs WHERE timestamp \u003e ? GROUP BY client_ip ORDER BY count DESC LIMIT 10 ''', (yesterday,)) top_ips = cursor.fetchall() conn.close() report = { 'active_users': active_users, 'recent_connections': recent_connections, 'top_ips': top_ips, 'generated_at': datetime.now().isoformat() } return report # 사용 예제 access_control = VPNAccessControl() # 사용자 추가 access_co","date":"2025-07-03","objectID":"/vpn/:7:2","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#2-방화벽-및-접근-제어"},{"categories":["Cyber Security"],"content":" VPN의 장점과 단점","date":"2025-07-03","objectID":"/vpn/:8:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#vpn의-장점과-단점"},{"categories":["Cyber Security"],"content":" 장점 보안 강화 데이터 암호화를 통한 도청 방지 터널링을 통한 안전한 데이터 전송 중간자 공격(Man-in-the-Middle) 방지 원격 접근 지리적 제약 없이 네트워크 접근 재택근무 및 원격 업무 지원 다양한 디바이스에서 접근 가능 비용 효율성 전용선 대비 저렴한 비용 기존 인터넷 인프라 활용 유지보수 비용 절약 ","date":"2025-07-03","objectID":"/vpn/:8:1","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#장점"},{"categories":["Cyber Security"],"content":" 단점 성능 저하 암호화/복호화로 인한 오버헤드 추가 네트워크 홉으로 인한 지연 대역폭 제한 가능성 복잡성 설정 및 관리의 복잡함 문제 진단의 어려움 다양한 클라이언트 지원 필요 보안 위험 잘못된 설정 시 보안 취약점 인증서 관리의 복잡성 내부 네트워크 노출 위험 ","date":"2025-07-03","objectID":"/vpn/:8:2","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#단점"},{"categories":["Cyber Security"],"content":" 실제 운영 시나리오","date":"2025-07-03","objectID":"/vpn/:9:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#실제-운영-시나리오"},{"categories":["Cyber Security"],"content":" 기업 환경에서의 VPN 구축 yaml # Docker Compose를 이용한 기업용 VPN 구축 version: '3.8' services: openvpn: image: kylemanna/openvpn container_name: openvpn ports: - \"1194:1194/udp\" volumes: - ./openvpn-data:/etc/openvpn cap_add: - NET_ADMIN environment: - OVPN_SERVER_URL=udp://vpn.company.com:1194 - OVPN_NETWORK=10.8.0.0 - OVPN_SUBNET=255.255.255.0 restart: unless-stopped vpn-monitor: image: nginx:alpine container_name: vpn-monitor ports: - \"8080:80\" volumes: - ./monitor:/usr/share/nginx/html depends_on: - openvpn restart: unless-stopped ldap-auth: image: openldap/openldap:latest container_name: ldap-auth environment: - LDAP_ORGANISATION=Company - LDAP_DOMAIN=company.com - LDAP_ADMIN_PASSWORD=admin_password volumes: - ./ldap-data:/var/lib/ldap - ./ldap-config:/etc/ldap/slapd.d restart: unless-stopped radius-server: image: freeradius/freeradius-server:latest container_name: radius-server ports: - \"1812:1812/udp\" - \"1813:1813/udp\" volumes: - ./radius-config:/etc/freeradius depends_on: - ldap-auth restart: unless-stopped ","date":"2025-07-03","objectID":"/vpn/:9:1","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#기업-환경에서의-vpn-구축"},{"categories":["Cyber Security"],"content":" 모니터링 대시보드 html \u003c!-- VPN 모니터링 대시보드 --\u003e \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eVPN 모니터링 대시보드\u003c/title\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/chart.js\"\u003e\u003c/script\u003e \u003cstyle\u003e body { font-family: Arial, sans-serif; margin: 20px; } .dashboard { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; } .card { border: 1px solid #ddd; padding: 20px; border-radius: 8px; } .metric { font-size: 24px; font-weight: bold; color: #333; } .status-good { color: #28a745; } .status-warning { color: #ffc107; } .status-error { color: #dc3545; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eVPN 모니터링 대시보드\u003c/h1\u003e \u003cdiv class=\"dashboard\"\u003e \u003cdiv class=\"card\"\u003e \u003ch3\u003e연결 상태\u003c/h3\u003e \u003cdiv class=\"metric\" id=\"connectionStatus\"\u003e확인 중...\u003c/div\u003e \u003cdiv\u003e활성 연결: \u003cspan id=\"activeConnections\"\u003e0\u003c/span\u003e\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"card\"\u003e \u003ch3\u003e서버 상태\u003c/h3\u003e \u003cdiv class=\"metric\" id=\"serverStatus\"\u003e확인 중...\u003c/div\u003e \u003cdiv\u003eCPU 사용률: \u003cspan id=\"cpuUsage\"\u003e0%\u003c/span\u003e\u003c/div\u003e \u003cdiv\u003e메모리 사용률: \u003cspan id=\"memoryUsage\"\u003e0%\u003c/span\u003e\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"card\"\u003e \u003ch3\u003e네트워크 트래픽\u003c/h3\u003e \u003ccanvas id=\"trafficChart\"\u003e\u003c/canvas\u003e \u003c/div\u003e \u003cdiv class=\"card\"\u003e \u003ch3\u003e최근 접속자\u003c/h3\u003e \u003cdiv id=\"recentUsers\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cscript\u003e // VPN 모니터링 JavaScript class VPNMonitor { constructor() { this.trafficChart = this.initTrafficChart(); this.updateInterval = 5000; // 5초마다 업데이트 this.startMonitoring(); } initTrafficChart() { const ctx = document.getElementById('trafficChart').getContext('2d'); return new Chart(ctx, { type: 'line', data: { labels: [], datasets: [{ label: '입력 트래픽 (MB/s)', data: [], borderColor: 'rgb(75, 192, 192)', tension: 0.1 }, { label: '출력 트래픽 (MB/s)', data: [], borderColor: 'rgb(255, 99, 132)', tension: 0.1 }] }, options: { responsive: true, scales: { y: { beginAtZero: true } } } }); } async fetchVPNStatus() { try { const response = await fetch('/api/vpn/status'); const data = await response.json(); return data; } catch (error) { console.error('VPN 상태 조회 실패:', error); return null; } } updateUI(data) { if (!data) return; // 연결 상태 업데이트 const connectionStatus = document.getElementById('connectionStatus'); const activeConnections = document.getElementById('activeConnections'); if (data.vpn_running) { connectionStatus.textContent = '정상'; connectionStatus.className = 'metric status-good'; } else { connectionStatus.textContent = '중단'; connectionStatus.className = 'metric status-error'; } activeConnections.textContent = data.active_connections || 0; // 서버 상태 업데이트 const serverStatus = document.getElementById('serverStatus'); const cpuUsage = document.getElementById('cpuUsage'); const memoryUsage = document.getElementById('memoryUsage'); serverStatus.textContent = data.server_healthy ? '정상' : '문제'; serverStatus.className = `metric ${data.server_healthy ? 'status-good' : 'status-error'}`; cpuUsage.textContent = `${data.cpu_usage}%`; memoryUsage.textContent = `${data.memory_usage}%`; // 트래픽 차트 업데이트 this.updateTrafficChart(data.traffic); // 최근 접속자 업데이트 this.updateRecentUsers(data.recent_users); } updateTrafficChart(trafficData) { const now = new Date().toLocaleTimeString(); this.trafficChart.data.labels.push(now); this.trafficChart.data.datasets[0].data.push(trafficData.inbound); this.trafficChart.data.datasets[1].data.push(trafficData.outbound); // 최근 20개 데이터만 유지 if (this.trafficChart.data.labels.length \u003e 20) { this.trafficChart.data.labels.shift(); this.trafficChart.data.datasets[0].data.shift(); this.trafficChart.data.datasets[1].data.shift(); } this.trafficChart.update(); } updateRecentUsers(users) { const recentUsers = document.getElementById('recentUsers'); recentUsers.innerHTML = ''; users.forEach(user =\u003e { const userDiv = document.createElement('div'); userDiv.innerHTML = ` \u003cstrong\u003e${user.username}\u003c/strong\u003e\u003cbr\u003e IP: ${user.ip}\u003cbr\u003e 연결 시간: ${user.connected_at}\u003cbr\u003e \u003chr\u003e `; recentUsers.appendChild(userDiv); }); } async startMonitoring() { while (true) { const data = await this.fetchVPNStatus(); this.updateUI(data); await new Promise(resolve =\u003e setTimeout(resolve, this.updateInterval)); } } } // 대시보드 초기화 document.addEventListener('DOMContentLoaded', () =\u003e {","date":"2025-07-03","objectID":"/vpn/:9:2","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#모니터링-대시보드"},{"categories":["Cyber Security"],"content":" 마치며VPN은 현대 네트워크 보안의 핵심 기술로, 원격 근무와 클라우드 환경이 일반화된 오늘날 더욱 중요해지고 있습니다. 이 글에서 다룬 내용들은 VPN의 기본 개념부터 실제 구현과 운영까지의 전체 라이프사이클을 포괄합니다. VPN을 성공적으로 구축하고 운영하기 위해서는 다음과 같은 요소들을 고려해야 합니다: 적절한 프로토콜 선택: 보안 요구사항과 성능 요구사항의 균형 확장 가능한 아키텍처: 사용자 증가에 대응할 수 있는 설계 지속적인 모니터링: 성능과 보안 상태의 실시간 추적 자동화된 관리: 인증서 관리, 사용자 관리 등의 자동화 보안 정책 준수: 기업 보안 정책과 규정 준수 VPN 기술은 계속 발전하고 있으며, WireGuard와 같은 새로운 프로토콜들이 등장하고 있습니다. 개발자로서는 이러한 기술 트렌드를 지속적으로 모니터링하고, 비즈니스 요구사항에 맞는 최적의 솔루션을 선택하는 것이 중요합니다. ","date":"2025-07-03","objectID":"/vpn/:10:0","series":null,"tags":["VPN"],"title":"VPN","uri":"/vpn/#마치며"},{"categories":["Technology"],"content":" 프록시 서버 완벽 가이드: 개념부터 실제 구현까지","date":"2025-07-03","objectID":"/proxy/:0:0","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#프록시-서버-완벽-가이드-개념부터-실제-구현까지"},{"categories":["Technology"],"content":" 들어가며현대 웹 개발과 네트워크 아키텍처에서 프록시 서버는 필수적인 구성 요소가 되었습니다. 로드 밸런싱, 보안, 캐싱, 그리고 다양한 네트워크 최적화를 위해 프록시 서버를 이해하고 활용하는 것은 개발자에게 매우 중요한 역량입니다. ","date":"2025-07-03","objectID":"/proxy/:1:0","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#들어가며"},{"categories":["Technology"],"content":" 프록시 서버란?프록시 서버(Proxy Server)는 클라이언트와 서버 사이에서 중개 역할을 하는 서버입니다. “프록시(Proxy)“라는 단어 자체가 “대리인\"을 의미하는 것처럼, 클라이언트를 대신해서 다른 서버에 요청을 전달하고 응답을 받아오는 역할을 합니다. ","date":"2025-07-03","objectID":"/proxy/:2:0","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#프록시-서버란"},{"categories":["Technology"],"content":" 기본 작동 원리 text 클라이언트 → 프록시 서버 → 대상 서버 클라이언트 ← 프록시 서버 ← 대상 서버 클라이언트가 프록시 서버에 요청을 보냅니다 프록시 서버가 클라이언트를 대신해 대상 서버에 요청을 전달합니다 대상 서버가 프록시 서버에 응답을 보냅니다 프록시 서버가 클라이언트에게 응답을 전달합니다 ","date":"2025-07-03","objectID":"/proxy/:2:1","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#기본-작동-원리"},{"categories":["Technology"],"content":" 프록시 서버의 종류","date":"2025-07-03","objectID":"/proxy/:3:0","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#프록시-서버의-종류"},{"categories":["Technology"],"content":" 1. Forward Proxy (정방향 프록시)Forward Proxy는 클라이언트와 인터넷 사이에 위치하여 클라이언트의 요청을 대신 처리합니다. 특징 클라이언트가 프록시 서버를 명시적으로 설정 대상 서버는 프록시 서버의 IP만 확인 가능 클라이언트의 익명성 보장 기업 내부 네트워크에서 인터넷 접근 제어에 주로 사용 활용 사례 javascript // 기업 내부에서 외부 API 호출 시 Forward Proxy 사용 예제 const https = require('https'); const HttpsProxyAgent = require('https-proxy-agent'); const proxyUrl = 'http://corporate-proxy:8080'; const agent = new HttpsProxyAgent(proxyUrl); const options = { hostname: 'api.external-service.com', port: 443, path: '/data', method: 'GET', agent: agent }; const req = https.request(options, (res) =\u003e { console.log(`상태 코드: ${res.statusCode}`); res.on('data', (chunk) =\u003e { console.log(chunk.toString()); }); }); req.end(); ","date":"2025-07-03","objectID":"/proxy/:3:1","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#1-forward-proxy-정방향-프록시"},{"categories":["Technology"],"content":" 1. Forward Proxy (정방향 프록시)Forward Proxy는 클라이언트와 인터넷 사이에 위치하여 클라이언트의 요청을 대신 처리합니다. 특징 클라이언트가 프록시 서버를 명시적으로 설정 대상 서버는 프록시 서버의 IP만 확인 가능 클라이언트의 익명성 보장 기업 내부 네트워크에서 인터넷 접근 제어에 주로 사용 활용 사례 javascript // 기업 내부에서 외부 API 호출 시 Forward Proxy 사용 예제 const https = require('https'); const HttpsProxyAgent = require('https-proxy-agent'); const proxyUrl = 'http://corporate-proxy:8080'; const agent = new HttpsProxyAgent(proxyUrl); const options = { hostname: 'api.external-service.com', port: 443, path: '/data', method: 'GET', agent: agent }; const req = https.request(options, (res) =\u003e { console.log(`상태 코드: ${res.statusCode}`); res.on('data', (chunk) =\u003e { console.log(chunk.toString()); }); }); req.end(); ","date":"2025-07-03","objectID":"/proxy/:3:1","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#특징"},{"categories":["Technology"],"content":" 1. Forward Proxy (정방향 프록시)Forward Proxy는 클라이언트와 인터넷 사이에 위치하여 클라이언트의 요청을 대신 처리합니다. 특징 클라이언트가 프록시 서버를 명시적으로 설정 대상 서버는 프록시 서버의 IP만 확인 가능 클라이언트의 익명성 보장 기업 내부 네트워크에서 인터넷 접근 제어에 주로 사용 활용 사례 javascript // 기업 내부에서 외부 API 호출 시 Forward Proxy 사용 예제 const https = require('https'); const HttpsProxyAgent = require('https-proxy-agent'); const proxyUrl = 'http://corporate-proxy:8080'; const agent = new HttpsProxyAgent(proxyUrl); const options = { hostname: 'api.external-service.com', port: 443, path: '/data', method: 'GET', agent: agent }; const req = https.request(options, (res) =\u003e { console.log(`상태 코드: ${res.statusCode}`); res.on('data', (chunk) =\u003e { console.log(chunk.toString()); }); }); req.end(); ","date":"2025-07-03","objectID":"/proxy/:3:1","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#활용-사례"},{"categories":["Technology"],"content":" 2. Reverse Proxy (역방향 프록시)Reverse Proxy는 서버와 인터넷 사이에 위치하여 서버를 대신해 클라이언트의 요청을 처리합니다. 특징 클라이언트는 프록시 서버의 존재를 모름 여러 백엔드 서버를 하나의 진입점으로 통합 로드 밸런싱, SSL 종료, 캐싱 등의 기능 제공 서버의 익명성과 보안 강화 Nginx를 이용한 Reverse Proxy 설정 예제 nginx # /etc/nginx/sites-available/reverse-proxy upstream backend_servers { server 192.168.1.10:3000 weight=3; server 192.168.1.11:3000 weight=2; server 192.168.1.12:3000 weight=1; } server { listen 80; server_name example.com; location / { proxy_pass http://backend_servers; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; # 타임아웃 설정 proxy_connect_timeout 30s; proxy_send_timeout 30s; proxy_read_timeout 30s; } # 정적 파일 캐싱 location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ { proxy_pass http://backend_servers; proxy_cache my_cache; proxy_cache_valid 200 1h; add_header X-Cache-Status $upstream_cache_status; } } ","date":"2025-07-03","objectID":"/proxy/:3:2","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#2-reverse-proxy-역방향-프록시"},{"categories":["Technology"],"content":" 2. Reverse Proxy (역방향 프록시)Reverse Proxy는 서버와 인터넷 사이에 위치하여 서버를 대신해 클라이언트의 요청을 처리합니다. 특징 클라이언트는 프록시 서버의 존재를 모름 여러 백엔드 서버를 하나의 진입점으로 통합 로드 밸런싱, SSL 종료, 캐싱 등의 기능 제공 서버의 익명성과 보안 강화 Nginx를 이용한 Reverse Proxy 설정 예제 nginx # /etc/nginx/sites-available/reverse-proxy upstream backend_servers { server 192.168.1.10:3000 weight=3; server 192.168.1.11:3000 weight=2; server 192.168.1.12:3000 weight=1; } server { listen 80; server_name example.com; location / { proxy_pass http://backend_servers; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; # 타임아웃 설정 proxy_connect_timeout 30s; proxy_send_timeout 30s; proxy_read_timeout 30s; } # 정적 파일 캐싱 location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ { proxy_pass http://backend_servers; proxy_cache my_cache; proxy_cache_valid 200 1h; add_header X-Cache-Status $upstream_cache_status; } } ","date":"2025-07-03","objectID":"/proxy/:3:2","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#특징-1"},{"categories":["Technology"],"content":" 2. Reverse Proxy (역방향 프록시)Reverse Proxy는 서버와 인터넷 사이에 위치하여 서버를 대신해 클라이언트의 요청을 처리합니다. 특징 클라이언트는 프록시 서버의 존재를 모름 여러 백엔드 서버를 하나의 진입점으로 통합 로드 밸런싱, SSL 종료, 캐싱 등의 기능 제공 서버의 익명성과 보안 강화 Nginx를 이용한 Reverse Proxy 설정 예제 nginx # /etc/nginx/sites-available/reverse-proxy upstream backend_servers { server 192.168.1.10:3000 weight=3; server 192.168.1.11:3000 weight=2; server 192.168.1.12:3000 weight=1; } server { listen 80; server_name example.com; location / { proxy_pass http://backend_servers; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; # 타임아웃 설정 proxy_connect_timeout 30s; proxy_send_timeout 30s; proxy_read_timeout 30s; } # 정적 파일 캐싱 location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ { proxy_pass http://backend_servers; proxy_cache my_cache; proxy_cache_valid 200 1h; add_header X-Cache-Status $upstream_cache_status; } } ","date":"2025-07-03","objectID":"/proxy/:3:2","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#nginx를-이용한-reverse-proxy-설정-예제"},{"categories":["Technology"],"content":" 프록시 서버의 주요 기능","date":"2025-07-03","objectID":"/proxy/:4:0","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#프록시-서버의-주요-기능"},{"categories":["Technology"],"content":" 1. 캐싱 (Caching)프록시 서버는 자주 요청되는 리소스를 캐시하여 응답 속도를 향상시킵니다. python # Python Flask를 이용한 간단한 캐싱 프록시 구현 from flask import Flask, request, Response import requests import hashlib import time app = Flask(__name__) cache = {} CACHE_DURATION = 300 # 5분 def get_cache_key(url, headers): content = f\"{url}:{str(sorted(headers.items()))}\" return hashlib.md5(content.encode()).hexdigest() @app.route('/', defaults={'path': ''}) @app.route('/\u003cpath:path\u003e') def proxy(path): target_url = f\"http://target-server.com/{path}\" cache_key = get_cache_key(target_url, dict(request.headers)) # 캐시 확인 if cache_key in cache: cached_response, timestamp = cache[cache_key] if time.time() - timestamp \u003c CACHE_DURATION: return Response( cached_response['content'], status=cached_response['status'], headers=cached_response['headers'] ) # 실제 요청 수행 response = requests.get(target_url, headers=dict(request.headers)) # 캐시 저장 cache[cache_key] = ({ 'content': response.content, 'status': response.status_code, 'headers': dict(response.headers) }, time.time()) return Response( response.content, status=response.status_code, headers=dict(response.headers) ) if __name__ == '__main__': app.run(port=8080) ","date":"2025-07-03","objectID":"/proxy/:4:1","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#1-캐싱-caching"},{"categories":["Technology"],"content":" 2. 로드 밸런싱 (Load Balancing)여러 서버 간의 트래픽을 분산하여 시스템의 가용성과 성능을 향상시킵니다. javascript // Node.js를 이용한 라운드 로빈 로드 밸런서 const http = require('http'); const httpProxy = require('http-proxy'); const servers = [ 'http://server1:3000', 'http://server2:3000', 'http://server3:3000' ]; let currentIndex = 0; const proxy = httpProxy.createProxyServer({}); // 헬스 체크를 위한 서버 상태 관리 const serverHealth = servers.map(() =\u003e true); function getNextServer() { // 건강한 서버만 선택 const healthyServers = servers.filter((_, index) =\u003e serverHealth[index]); if (healthyServers.length === 0) { throw new Error('모든 서버가 다운되었습니다'); } const server = healthyServers[currentIndex % healthyServers.length]; currentIndex++; return server; } // 헬스 체크 함수 function healthCheck() { servers.forEach((server, index) =\u003e { http.get(`${server}/health`, (res) =\u003e { serverHealth[index] = res.statusCode === 200; }).on('error', () =\u003e { serverHealth[index] = false; }); }); } // 5초마다 헬스 체크 수행 setInterval(healthCheck, 5000); const server = http.createServer((req, res) =\u003e { try { const target = getNextServer(); console.log(`요청을 ${target}로 전달`); proxy.web(req, res, { target: target, changeOrigin: true }); } catch (error) { res.writeHead(503, { 'Content-Type': 'text/plain' }); res.end('서비스를 사용할 수 없습니다'); } }); server.listen(8080, () =\u003e { console.log('로드 밸런서가 8080 포트에서 실행 중입니다'); }); ","date":"2025-07-03","objectID":"/proxy/:4:2","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#2-로드-밸런싱-load-balancing"},{"categories":["Technology"],"content":" 3. SSL 종료 (SSL Termination)프록시 서버에서 SSL/TLS 암호화를 처리하여 백엔드 서버의 부하를 줄입니다. yaml # Docker Compose를 이용한 SSL 종료 프록시 설정 version: '3.8' services: nginx-proxy: image: nginx:alpine ports: - \"80:80\" - \"443:443\" volumes: - ./nginx.conf:/etc/nginx/nginx.conf - ./ssl:/etc/nginx/ssl depends_on: - app1 - app2 app1: image: node:alpine command: node server.js expose: - \"3000\" app2: image: node:alpine command: node server.js expose: - \"3000\" ","date":"2025-07-03","objectID":"/proxy/:4:3","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#3-ssl-종료-ssl-termination"},{"categories":["Technology"],"content":" 프록시 서버의 장점","date":"2025-07-03","objectID":"/proxy/:5:0","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#프록시-서버의-장점"},{"categories":["Technology"],"content":" 1. 성능 향상 캐싱: 자주 요청되는 리소스를 캐시하여 응답 시간 단축 압축: 데이터 압축을 통한 대역폭 절약 연결 풀링: 백엔드 서버와의 연결을 재사용하여 오버헤드 감소 ","date":"2025-07-03","objectID":"/proxy/:5:1","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#1-성능-향상"},{"categories":["Technology"],"content":" 2. 보안 강화 방화벽 역할: 악성 요청 필터링 IP 은닉: 실제 서버의 IP 주소 숨김 DDoS 방어: 트래픽 분산을 통한 공격 완화 ","date":"2025-07-03","objectID":"/proxy/:5:2","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#2-보안-강화"},{"categories":["Technology"],"content":" 3. 확장성 로드 밸런싱: 여러 서버로 트래픽 분산 수평 확장: 새로운 서버 추가가 용이 단일 진입점: 클라이언트에게 일관된 인터페이스 제공 ","date":"2025-07-03","objectID":"/proxy/:5:3","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#3-확장성"},{"categories":["Technology"],"content":" 프록시 서버의 단점","date":"2025-07-03","objectID":"/proxy/:6:0","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#프록시-서버의-단점"},{"categories":["Technology"],"content":" 1. 복잡성 증가 네트워크 아키텍처가 복잡해짐 디버깅과 모니터링이 어려워질 수 있음 추가적인 관리 포인트 생성 ","date":"2025-07-03","objectID":"/proxy/:6:1","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#1-복잡성-증가"},{"categories":["Technology"],"content":" 2. 단일 장애점 (SPOF) 프록시 서버에 문제가 발생하면 전체 서비스 영향 고가용성 구성이 필요 ","date":"2025-07-03","objectID":"/proxy/:6:2","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#2-단일-장애점-spof"},{"categories":["Technology"],"content":" 3. 지연 시간 추가적인 네트워크 홉으로 인한 지연 프록시 서버 처리 시간 ","date":"2025-07-03","objectID":"/proxy/:6:3","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#3-지연-시간"},{"categories":["Technology"],"content":" 실제 구현 시 고려사항","date":"2025-07-03","objectID":"/proxy/:7:0","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#실제-구현-시-고려사항"},{"categories":["Technology"],"content":" 1. 모니터링 및 로깅 python # 프록시 서버 모니터링을 위한 메트릭 수집 import time import logging from collections import defaultdict class ProxyMetrics: def __init__(self): self.request_count = defaultdict(int) self.response_times = defaultdict(list) self.error_count = defaultdict(int) def record_request(self, endpoint, response_time, status_code): self.request_count[endpoint] += 1 self.response_times[endpoint].append(response_time) if status_code \u003e= 400: self.error_count[endpoint] += 1 def get_average_response_time(self, endpoint): times = self.response_times[endpoint] return sum(times) / len(times) if times else 0 def get_error_rate(self, endpoint): total = self.request_count[endpoint] errors = self.error_count[endpoint] return (errors / total) * 100 if total \u003e 0 else 0 metrics = ProxyMetrics() # 요청 처리 시 메트릭 수집 def handle_request(endpoint): start_time = time.time() try: # 실제 요청 처리 response = process_request(endpoint) status_code = response.status_code except Exception as e: logging.error(f\"요청 처리 중 오류: {e}\") status_code = 500 response_time = time.time() - start_time metrics.record_request(endpoint, response_time, status_code) return response ","date":"2025-07-03","objectID":"/proxy/:7:1","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#1-모니터링-및-로깅"},{"categories":["Technology"],"content":" 2. 보안 헤더 설정 nginx # 보안 강화를 위한 Nginx 설정 server { # 보안 헤더 추가 add_header X-Frame-Options \"SAMEORIGIN\" always; add_header X-Content-Type-Options \"nosniff\" always; add_header X-XSS-Protection \"1; mode=block\" always; add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always; add_header Content-Security-Policy \"default-src 'self'\" always; # 서버 정보 숨기기 server_tokens off; # Rate Limiting limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s; location /api/ { limit_req zone=api burst=20 nodelay; proxy_pass http://backend_servers; } } ","date":"2025-07-03","objectID":"/proxy/:7:2","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#2-보안-헤더-설정"},{"categories":["Technology"],"content":" 3. 오류 처리 및 Fallback javascript // Express.js를 이용한 프록시 서버의 오류 처리 const express = require('express'); const { createProxyMiddleware } = require('http-proxy-middleware'); const app = express(); const proxyOptions = { target: 'http://backend-server', changeOrigin: true, onError: (err, req, res) =\u003e { console.error('프록시 오류:', err.message); // Fallback 응답 res.status(503).json({ error: '서비스 일시 중단', message: '잠시 후 다시 시도해주세요', timestamp: new Date().toISOString() }); }, onProxyReq: (proxyReq, req, res) =\u003e { // 요청 로깅 console.log(`${req.method} ${req.url} -\u003e ${proxyReq.path}`); }, timeout: 30000, proxyTimeout: 30000 }; app.use('/api', createProxyMiddleware(proxyOptions)); // 헬스 체크 엔드포인트 app.get('/health', (req, res) =\u003e { res.json({ status: 'healthy', timestamp: new Date().toISOString() }); }); app.listen(8080, () =\u003e { console.log('프록시 서버가 8080 포트에서 실행 중입니다'); }); ","date":"2025-07-03","objectID":"/proxy/:7:3","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#3-오류-처리-및-fallback"},{"categories":["Technology"],"content":" 마치며프록시 서버는 현대 웹 아키텍처에서 핵심적인 역할을 합니다. 적절한 프록시 서버 구성을 통해 성능, 보안, 확장성을 모두 향상시킬 수 있습니다. 하지만 복잡성 증가와 추가적인 관리 포인트라는 단점도 고려해야 합니다. 프록시 서버를 도입할 때는 비즈니스 요구사항과 기술적 제약사항을 충분히 고려하여 적절한 솔루션을 선택하는 것이 중요합니다. 또한 지속적인 모니터링과 성능 튜닝을 통해 최적의 성능을 유지해야 합니다. ","date":"2025-07-03","objectID":"/proxy/:8:0","series":null,"tags":["Proxy","Web"],"title":"Proxy","uri":"/proxy/#마치며"},{"categories":["Cyber Security"],"content":" Configurations","date":"2025-07-02","objectID":"/ethical-hacker-cookbook/:0:0","series":null,"tags":["Kali Linux","UTM"],"title":"Ethical Hacker Cookbook","uri":"/ethical-hacker-cookbook/#configurations"},{"categories":["Cyber Security"],"content":" Kali LinuxKali Linux로 가서 애플실리콘 적용 이미지(내것은 M2, Apple Sillicon이니 ARM64)를 다운로드 한다. Installer Image 카테고리를 누르고 Apple Sillicon을 선택한다. Installer를 눌러 다운로드 한다. ","date":"2025-07-02","objectID":"/ethical-hacker-cookbook/:1:0","series":null,"tags":["Kali Linux","UTM"],"title":"Ethical Hacker Cookbook","uri":"/ethical-hacker-cookbook/#kali-linux"},{"categories":["Cyber Security"],"content":" 가상 머신 설치하기Kali Linux ISO(운영체제 이미지)를 올릴 가상 머신을 설치해준다. 맥에 가장 적절한 UTM을 사용한다. 공식 홈페이지에서 다운로드 해준다. ","date":"2025-07-02","objectID":"/ethical-hacker-cookbook/:2:0","series":null,"tags":["Kali Linux","UTM"],"title":"Ethical Hacker Cookbook","uri":"/ethical-hacker-cookbook/#가상-머신-설치하기"},{"categories":["Cyber Security"],"content":" Kali Linux 올리기 새 가상머신 만들기 가상화 Linux 부팅 ISO Image의 찾아보기 -\u003e 기존에 다운로드 받은 Kali Linux ISO 이미지 파이을 넣어준다. CPU, Memory 설정은 필요에 따라 바꿔주고 설정을 마친다. Warning 아래와 같이 설정해주어야 정상적으로 운영체제가 시작된다. Memory: 2048 MB Core: 기본값 Disk: 32 GB 설정이 끝난 후 바로 가상 머신을 키지 않고 오른쪽 상단의 네비게이션바 클릭 -\u003e 장치의 새로 만들기 -\u003e 직렬 포트 -\u003e 저장해준다. UTM에서 Graphical Install로 하면 설치가 되지않는 이슈가 있으니 Install을 선택한다. 시간대, 유저 이름, 패스워드 등을 설정하면 설치가 완료된다. 설치가 완료되면 CD/DVD에서 초기화를 눌러 설치 이미지를 제거해준다. 제거해주지 않으면 부팅시 매번 다시 설치해주어야 한다. ","date":"2025-07-02","objectID":"/ethical-hacker-cookbook/:3:0","series":null,"tags":["Kali Linux","UTM"],"title":"Ethical Hacker Cookbook","uri":"/ethical-hacker-cookbook/#kali-linux-올리기"},{"categories":["Projects"],"content":" CCTV 영상 데이터 품질 모니터링 시스템","date":"2025-05-10","objectID":"/cctv-quality-monitor/:0:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#cctv-영상-데이터-품질-모니터링-시스템"},{"categories":["Projects"],"content":" 프로젝트 개요CCTV 영상 데이터 품질 모니터링 시스템은 국가교통정보센터에서 제공하는 실시간 도로 CCTV 영상의 품질을 자동으로 모니터링하고 분석하는 시스템입니다. 이 시스템은 영상의 해상도, 프레임 손실, 밝기, 대비, 선명도 등 다양한 품질 지표를 실시간으로 측정하고, 문제가 있는 CCTV를 신속하게 식별하여 품질 관리를 효율화합니다. Kibana Dashboard Dashboard 1: 실시간 상태 확인 Dashboard 2: 품질 추세 시각화 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:1:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#프로젝트-개요"},{"categories":["Projects"],"content":" 주요 기능 실시간 CCTV 데이터 수집: 국가교통정보센터 API를 통해 실시간으로 CCTV 메타데이터 및 스트림 URL 수집 영상 품질 분석: OpenCV를 활용한 영상 품질 분석 (밝기, 대비, 블러, 프레임 손실율 등) 실시간 데이터 스트리밍: Kafka를 통한 실시간 품질 데이터 스트리밍 데이터 저장 및 시각화: Elasticsearch에 품질 데이터를 저장하고 Kibana를 통해 시각화 워크플로우 자동화: Airflow를 사용한 품질 점검 작업 자동화 알림 시스템: 품질 문제 발생 시 알림 기능 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:2:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#주요-기능"},{"categories":["Projects"],"content":" 백엔드 Python 3.9+: 주요 개발 언어 OpenCV: 영상 데이터 품질 분석 Apache Kafka: 실시간 데이터 스트리밍 Elasticsearch: 품질 데이터 저장 및 검색 Apache Airflow: 워크플로우 자동화 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:2:1","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#백엔드"},{"categories":["Projects"],"content":" 인프라 및 배포 Docker \u0026 Docker Compose: 컨테이너화 및 서비스 오케스트레이션 Makefile: 프로젝트 명령어 관리 Poetry: Python 의존성 관리 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:2:2","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#인프라-및-배포"},{"categories":["Projects"],"content":" 시각화 및 모니터링 Kibana: 대시보드 및 데이터 시각화 Kafka UI: Kafka 클러스터 모니터링 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:2:3","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#시각화-및-모니터링"},{"categories":["Projects"],"content":" 시스템 아키텍처시스템은 다음과 같은 주요 컴포넌트로 구성됩니다: 데이터 수집 모듈: 국가교통정보센터 API에서 CCTV 정보를 수집하고 Kafka에 전송 품질 분석 모듈: OpenCV를 사용하여 CCTV 스트림 품질을 분석 데이터 저장 모듈: 분석된 품질 데이터를 Elasticsearch에 저장 워크플로우 관리: Airflow로 전체 데이터 파이프라인 관리 시각화 모듈: Kibana 대시보드를 통한 품질 데이터 시각화 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:3:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#시스템-아키텍처"},{"categories":["Projects"],"content":" 구현 세부 사항","date":"2025-05-10","objectID":"/cctv-quality-monitor/:4:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#구현-세부-사항"},{"categories":["Projects"],"content":" 품질 측정 지표 밝기(Brightness): 영상의 평균 밝기 수준 대비(Contrast): 영상의 명암 대비 선명도(Sharpness): 영상의 선명도 지표 (라플라시안 분산) 프레임 손실율: 정지된 프레임 감지를 통한 프레임 손실률 프레임 레이트(FPS): 초당 프레임 수 해상도: 영상의 해상도 측정 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:4:1","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#품질-측정-지표"},{"categories":["Projects"],"content":" 데이터 파이프라인 text API 수집 → Kafka Producer → Kafka Topic → Kafka Consumer → 품질 분석 → Elasticsearch → Kibana 시각화 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:4:2","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#데이터-파이프라인"},{"categories":["Projects"],"content":" 대시보드 구성 실시간 상태 대시보드: 전체 CCTV 시스템의 현재 상태 표시 품질 추세 대시보드: 시간에 따른 품질 지표 변화 추세 위치 기반 대시보드: 지도 위에 CCTV 위치 및 상태 표시 문제 감지 대시보드: 품질 문제가 있는 CCTV 강조 표시 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:4:3","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#대시보드-구성"},{"categories":["Projects"],"content":" 설치 및 실행 방법","date":"2025-05-10","objectID":"/cctv-quality-monitor/:5:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#설치-및-실행-방법"},{"categories":["Projects"],"content":" 사전 요구사항 Docker 및 Docker Compose Python 3.9 이상 Poetry (Python 패키지 관리) 최소 8GB RAM 권장 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:5:1","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#사전-요구사항"},{"categories":["Projects"],"content":" 설치 과정 저장소 클론 bash git clone https://github.com/seilylook/CCTV_Quality_Monitor.git cd cctv-quality-monitoring 환경 변수 설정 bash cp .env.example .env # .env 파일을 편집하여 API 키 및 기타 설정을 구성하세요 프로젝트 설정 bash make setup 서비스 시작 bash make all ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:5:2","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#설치-과정"},{"categories":["Projects"],"content":" 웹 인터페이스 접속 Airflow: http://localhost:8080 (기본 계정: airflow/airflow) Kibana: http://localhost:5601 Kafka UI: http://localhost:8989 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:5:3","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#웹-인터페이스-접속"},{"categories":["Projects"],"content":" 프로젝트 구조 text cctv-quality-monitoring/ ├── .env.example # 환경 변수 예시 파일 ├── .gitignore # Git 무시 파일 목록 ├── Makefile # 프로젝트 명령어 관리 ├── README.md # 프로젝트 설명 ├── docker-compose.yml # 도커 컴포즈 설정 ├── pyproject.toml # Poetry 의존성 설정 ├── Dockerfile # 애플리케이션 도커 이미지 ├── Dockerfile.airflow # Airflow 커스텀 이미지 ├── airflow/ │ ├── dags/ │ │ └── cctv_quality_dag.py # Airflow DAG 정의 │ └── plugins/ │ └── operators/ │ └── cctv_operators.py ├── src/ │ ├── __init__.py │ ├── config.py # 설정 관리 │ ├── main.py # 메인 애플리케이션 │ ├── api/ │ │ ├── __init__.py │ │ └── cctv_api.py # CCTV API 클라이언트 │ ├── kafka/ │ │ ├── __init__.py │ │ ├── producer.py # Kafka 프로듀서 │ │ └── consumer.py # Kafka 컨슈머 │ ├── quality/ │ │ ├── __init__.py │ │ ├── analyzer.py # 영상 품질 분석 로직 │ │ └── metrics.py # 품질 메트릭 정의 │ └── storage/ │ ├── __init__.py │ └── elasticsearch.py # Elasticsearch 연동 └── tests/ ├── __init__.py ├── conftest.py # 테스트 설정 ├── test_api.py # API 테스트 └── test_analyzer.py # 분석기 테스트 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:6:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#프로젝트-구조"},{"categories":["Projects"],"content":" 개발 과정 및 도전 과제","date":"2025-05-10","objectID":"/cctv-quality-monitor/:7:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#개발-과정-및-도전-과제"},{"categories":["Projects"],"content":" 도전 과제 스트림 처리 안정성: HLS 스트림 형식의 다양한 CCTV URL을 안정적으로 처리하기 위한 예외 처리 및 재시도 로직 구현 실시간 처리 부하: 다수 CCTV 스트림의 동시 처리로 인한 시스템 부하 관리 OpenCV 호환성: Docker 환경에서 OpenCV 라이브러리 종속성 문제 해결 데이터 일관성: Kafka와 Elasticsearch 간 데이터 일관성 유지 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:7:1","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#도전-과제"},{"categories":["Projects"],"content":" 해결 방법 견고한 에러 처리 및 로깅 시스템 구현 컨테이너 자원 할당 최적화 및 배치 처리 도입 커스텀 Docker 이미지를 통한 시스템 라이브러리 관리 데이터 스키마 정의 및 검증 로직 구현 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:7:2","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#해결-방법"},{"categories":["Projects"],"content":" 시스템 성능 처리 용량: 시간당 최대 500개 CCTV 스트림 처리 응답 시간: 품질 이슈 감지 시 평균 1분 이내 알림 정확도: 영상 품질 문제 감지 정확도 95% 이상 가용성: 99.9% 시스템 가동 시간 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:8:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#시스템-성능"},{"categories":["Projects"],"content":" 미래 개선 사항 딥러닝 모델 통합: 영상 품질 분석을 위한 딥러닝 모델 도입 이상치 탐지 개선: 시계열 데이터 기반 고급 이상치 탐지 알고리즘 구현 클라우드 환경 최적화: AWS, Azure 또는 GCP 환경에 최적화된 배포 구성 모바일 알림 시스템: 모바일 애플리케이션을 통한 실시간 알림 시스템 구현 ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:9:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#미래-개선-사항"},{"categories":["Projects"],"content":" 결론CCTV 영상 데이터 품질 모니터링 시스템은 대규모 CCTV 네트워크의 품질을 효율적으로 모니터링하고 관리할 수 있는 확장 가능한 솔루션입니다. 실시간 데이터 처리, 고급 영상 분석, 직관적인 시각화를 통해 CCTV 관리자가 품질 문제를 신속하게 식별하고 대응할 수 있습니다. 이 프로젝트는 빅데이터 처리, 영상 분석, 분산 시스템 설계 등의 기술을 실무에 적용한 사례로, 대규모 데이터 파이프라인 구축과 실시간 모니터링 시스템 개발 역량을 보여줍니다. ","date":"2025-05-10","objectID":"/cctv-quality-monitor/:10:0","series":null,"tags":["Kafka","YOLO","Flink","InfluxDB","Grafana"],"title":"CCTV Quality Monitor","uri":"/cctv-quality-monitor/#결론"},{"categories":["Technology"],"content":" Poetry로 Python 프로젝트 환경 설정하기Python 프로젝트를 만들 때 의존성 관리와 가상환경 설정이 번거로운 경우가 많습니다. Poetry는 이러한 작업을 깔끔하게 정리해주는 툴로, 패키지 관리와 프로젝트 배포까지 도와주는 훌륭한 도구입니다. 아래는 프로젝트에서 Poetry를 설정하는 방법을 정리한 내용입니다. ","date":"2025-05-07","objectID":"/poetry/:1:0","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#poetry로-python-프로젝트-환경-설정하기"},{"categories":["Technology"],"content":" 1. 프로젝트 초기화Poetry를 사용해 프로젝트를 초기화하려면 아래 명령어를 입력합니다. bash 🔥 poetry init 명령어를 실행하면 pyproject.toml 파일을 생성하며, 의존성 등을 직접 입력하거나 생략할 수 있습니다. ","date":"2025-05-07","objectID":"/poetry/:1:1","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#1-프로젝트-초기화"},{"categories":["Technology"],"content":" 2. 가상환경을 프로젝트 내부에 생성하기Poetry는 기본적으로 프로젝트 외부에 가상환경을 생성합니다. 하지만 프로젝트 폴더 내부에 .venv로 가상환경을 만들고 싶다면 다음 설정을 추가합니다. bash 🔥 poetry config virtualenvs.in-project true 이 설정을 해두면, 프로젝트 루트 디렉토리에 .venv/ 폴더가 생성됩니다. ","date":"2025-05-07","objectID":"/poetry/:1:2","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#2-가상환경을-프로젝트-내부에-생성하기"},{"categories":["Technology"],"content":" 3. pyenv와 함께 사용하는 경우: Python 버전 지정pyenv를 사용 중이라면, 현재 선택된 Python 버전을 Poetry에 적용할 수 있습니다. bash 🔥 poetry env use $(pyenv which python) 이 명령어는 pyenv가 가리키는 Python 버전을 현재 프로젝트에 설정해줍니다. ","date":"2025-05-07","objectID":"/poetry/:1:3","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#3-pyenv와-함께-사용하는-경우-python-버전-지정"},{"categories":["Technology"],"content":" 4. 가상환경 정보 확인현재 프로젝트에서 사용 중인 가상환경의 경로나 정보를 확인하고 싶다면 다음 명령어를 실행합니다. bash 🔥 poetry env info ","date":"2025-05-07","objectID":"/poetry/:1:4","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#4-가상환경-정보-확인"},{"categories":["Technology"],"content":" 5. VS Code에서 가상환경 Python 경로 설정VS Code에서 Poetry의 가상환경을 Python 인터프리터로 설정하려면: Cmd + Shift + P 를 눌러 명령 팔레트를 열고 Python: 인터프리터 선택을 검색 사용자 정의 경로 입력 옵션을 선택한 후 다음 경로를 입력합니다: text /Users/seilylook/Development/Projects/traffic-congestion-monitoring/.venv/bin/python ","date":"2025-05-07","objectID":"/poetry/:1:5","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#5-vs-code에서-가상환경-python-경로-설정"},{"categories":["Technology"],"content":" 6. requirements.txt 파일로 의존성 내보내기배포나 서버 설정 시 requirements.txt 파일이 필요한 경우가 많은데, Poetry에서는 플러그인을 사용해 이를 쉽게 생성할 수 있습니다. 먼저 pyproject.toml에 다음 설정을 추가합니다: toml [tool.poetry.plugins.\"poetry.plugin\"] \"export\" = \"poetry_plugin_export.plugin:ExportPlugin\" 혹은 Poetry 1.8 이상에서는 아래처럼 명령어로 설정할 수 있습니다: toml [tool.poetry.requires-plugins] poetry-plugin-export = \"\u003e=1.8\" 이후 아래 명령어로 requirements.txt 파일을 생성할 수 있습니다: bash 🔥 poetry export -f requirements.txt --output requirements.txt ","date":"2025-05-07","objectID":"/poetry/:1:6","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#6-requirementstxt-파일로-의존성-내보내기"},{"categories":["Technology"],"content":" 7. 의존성 설치pyproject.toml에 정의된 의존성들을 설치하려면 아래 명령어를 사용합니다: bash 🔥 poetry install ","date":"2025-05-07","objectID":"/poetry/:1:7","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#7-의존성-설치"},{"categories":["Technology"],"content":" 마무리이제 Poetry를 활용하여 깔끔하고 안정적인 Python 개발 환경을 구축할 수 있습니다. 프로젝트마다 반복되는 설정을 자동화하고, 코드 배포나 협업 시에도 환경 차이로 인한 이슈를 줄일 수 있습니다. ","date":"2025-05-07","objectID":"/poetry/:2:0","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#마무리"},{"categories":["Technology"],"content":" HLS(HTTP Live Streaming)","date":"2025-04-30","objectID":"/hls/:0:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#hlshttp-live-streaming"},{"categories":["Technology"],"content":" ✅ HLS란? HTTP 기반의 비디오 스트리밍 프로토콜로, 애플에서 개발했고 현재 가장 널리 사용돼요. 라이브라는 이름이 있지만 VOD(주문형) 과 라이브 스트리밍 둘 다 지원합니다. 비디오 파일을 잘게 조각(세그먼트) 내서 HTTP로 전송하고, 클라이언트가 조각들을 받아서 순서대로 재생합니다. ","date":"2025-04-30","objectID":"/hls/:1:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-hls란"},{"categories":["Technology"],"content":" ✅ 왜 많이 쓰이나요? HTTP 기반이라 웹 서버로 쉽게 배포 가능 (추가 장비 불필요) 모든 디바이스에서 재생 가능 (모바일, 데스크탑 등) 네트워크 상황에 따라 자동으로 화질 조절 (적응 비트 전송률) ","date":"2025-04-30","objectID":"/hls/:2:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-왜-많이-쓰이나요"},{"categories":["Technology"],"content":" ✅ 어떻게 작동하나요?","date":"2025-04-30","objectID":"/hls/:3:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-어떻게-작동하나요"},{"categories":["Technology"],"content":" 1. 서버 측 작업 인코딩: 다양한 디바이스에서 재생 가능한 포맷(H.264/H.265)으로 변환 세그먼트 분할: 비디오를 6초 정도 길이로 쪼갬 인덱스 파일 생성: 어떤 순서로 세그먼트를 불러올지 기록 여러 화질로 복제: 예) 480p, 720p, 1080p → 적응 비트 전송률용 ","date":"2025-04-30","objectID":"/hls/:3:1","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#1-서버-측-작업"},{"categories":["Technology"],"content":" 2. 배포 보통 CDN이 중간에서 빠르게 전달하고 캐시도 담당 ","date":"2025-04-30","objectID":"/hls/:3:2","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#2-배포"},{"categories":["Technology"],"content":" 3. 클라이언트 인덱스 파일을 보고 세그먼트를 순서대로 요청해서 재생 네트워크에 따라 자동으로 품질 조절 ","date":"2025-04-30","objectID":"/hls/:3:3","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#3-클라이언트"},{"categories":["Technology"],"content":" ✅ 적응 비트 전송률이 뭐예요? 네트워크 상태에 따라 스트리밍 화질을 실시간 조절하는 기능입니다. 느려지면 저화질로 자동 전환해서 끊기지 않게 하고, 좋아지면 고화질로 자동 업그레이드해줍니다. HLS가 미리 다양한 화질로 세그먼트를 만들어 두기 때문에 가능해요. ","date":"2025-04-30","objectID":"/hls/:4:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-적응-비트-전송률이-뭐예요"},{"categories":["Technology"],"content":" ✅ TCP vs UDP? 왜 HLS는 TCP 써요? 대부분의 스트리밍 프로토콜은 빠른 전송을 위해 UDP를 쓰는데, HLS는 신뢰성 있는 전송이 더 중요해서 TCP를 사용합니다. ","date":"2025-04-30","objectID":"/hls/:5:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-tcp-vs-udp-왜-hls는-tcp-써요"},{"categories":["Technology"],"content":" 이유: HTTP = TCP 기반이라 자연스럽게 따라감 실시간성이 아주 중요하지 않음 (몇 초 지연돼도 괜찮음) 인터넷 환경이 좋아져서 TCP 속도도 충분함 적응 비트 전송률이 끊김을 완화해줌 ","date":"2025-04-30","objectID":"/hls/:5:1","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#이유"},{"categories":["Technology"],"content":" 🔁 정리HLS는 HTTP 기반 스트리밍 프로토콜로, 비디오를 몇 초 단위로 쪼개서 전송하는 방식입니다. 모든 디바이스와 서버에서 HTTP를 쓰기 때문에 호환성과 배포가 좋고, 적응 비트 전송률 기능으로 네트워크 상태에 따라 자동 화질 조절이 가능합니다. 다른 프로토콜은 속도 때문에 UDP를 쓰지만, HLS는 HTTP 기반이라 TCP를 사용하고, 실시간성이 아주 중요하지 않기 때문에 문제가 되지 않습니다. ","date":"2025-04-30","objectID":"/hls/:6:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-정리"}]