[{"categories":["Technology"],"content":" Poetry로 Python 프로젝트 환경 설정하기Python 프로젝트를 만들 때 의존성 관리와 가상환경 설정이 번거로운 경우가 많습니다. Poetry는 이러한 작업을 깔끔하게 정리해주는 툴로, 패키지 관리와 프로젝트 배포까지 도와주는 훌륭한 도구입니다. 아래는 프로젝트에서 Poetry를 설정하는 방법을 정리한 내용입니다. ","date":"2025-05-07","objectID":"/poetry/:1:0","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#poetry로-python-프로젝트-환경-설정하기"},{"categories":["Technology"],"content":" 1. 프로젝트 초기화Poetry를 사용해 프로젝트를 초기화하려면 아래 명령어를 입력합니다. bash 🔥 poetry init 명령어를 실행하면 pyproject.toml 파일을 생성하며, 의존성 등을 직접 입력하거나 생략할 수 있습니다. ","date":"2025-05-07","objectID":"/poetry/:1:1","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#1-프로젝트-초기화"},{"categories":["Technology"],"content":" 2. 가상환경을 프로젝트 내부에 생성하기Poetry는 기본적으로 프로젝트 외부에 가상환경을 생성합니다. 하지만 프로젝트 폴더 내부에 .venv로 가상환경을 만들고 싶다면 다음 설정을 추가합니다. bash 🔥 poetry config virtualenvs.in-project true 이 설정을 해두면, 프로젝트 루트 디렉토리에 .venv/ 폴더가 생성됩니다. ","date":"2025-05-07","objectID":"/poetry/:1:2","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#2-가상환경을-프로젝트-내부에-생성하기"},{"categories":["Technology"],"content":" 3. pyenv와 함께 사용하는 경우: Python 버전 지정pyenv를 사용 중이라면, 현재 선택된 Python 버전을 Poetry에 적용할 수 있습니다. bash 🔥 poetry env use $(pyenv which python) 이 명령어는 pyenv가 가리키는 Python 버전을 현재 프로젝트에 설정해줍니다. ","date":"2025-05-07","objectID":"/poetry/:1:3","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#3-pyenv와-함께-사용하는-경우-python-버전-지정"},{"categories":["Technology"],"content":" 4. 가상환경 정보 확인현재 프로젝트에서 사용 중인 가상환경의 경로나 정보를 확인하고 싶다면 다음 명령어를 실행합니다. bash 🔥 poetry env info ","date":"2025-05-07","objectID":"/poetry/:1:4","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#4-가상환경-정보-확인"},{"categories":["Technology"],"content":" 5. VS Code에서 가상환경 Python 경로 설정VS Code에서 Poetry의 가상환경을 Python 인터프리터로 설정하려면: Cmd + Shift + P 를 눌러 명령 팔레트를 열고 Python: 인터프리터 선택을 검색 사용자 정의 경로 입력 옵션을 선택한 후 다음 경로를 입력합니다: text /Users/seilylook/Development/Projects/traffic-congestion-monitoring/.venv/bin/python ","date":"2025-05-07","objectID":"/poetry/:1:5","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#5-vs-code에서-가상환경-python-경로-설정"},{"categories":["Technology"],"content":" 6. requirements.txt 파일로 의존성 내보내기배포나 서버 설정 시 requirements.txt 파일이 필요한 경우가 많은데, Poetry에서는 플러그인을 사용해 이를 쉽게 생성할 수 있습니다. 먼저 pyproject.toml에 다음 설정을 추가합니다: toml [tool.poetry.plugins.\"poetry.plugin\"] \"export\" = \"poetry_plugin_export.plugin:ExportPlugin\" 혹은 Poetry 1.8 이상에서는 아래처럼 명령어로 설정할 수 있습니다: toml [tool.poetry.requires-plugins] poetry-plugin-export = \"\u003e=1.8\" 이후 아래 명령어로 requirements.txt 파일을 생성할 수 있습니다: bash 🔥 poetry export -f requirements.txt --output requirements.txt ","date":"2025-05-07","objectID":"/poetry/:1:6","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#6-requirementstxt-파일로-의존성-내보내기"},{"categories":["Technology"],"content":" 7. 의존성 설치pyproject.toml에 정의된 의존성들을 설치하려면 아래 명령어를 사용합니다: bash 🔥 poetry install ","date":"2025-05-07","objectID":"/poetry/:1:7","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#7-의존성-설치"},{"categories":["Technology"],"content":" 마무리이제 Poetry를 활용하여 깔끔하고 안정적인 Python 개발 환경을 구축할 수 있습니다. 프로젝트마다 반복되는 설정을 자동화하고, 코드 배포나 협업 시에도 환경 차이로 인한 이슈를 줄일 수 있습니다. ","date":"2025-05-07","objectID":"/poetry/:2:0","series":null,"tags":["Environment"],"title":"Poetry","uri":"/poetry/#마무리"},{"categories":["Technology"],"content":" HLS(HTTP Live Streaming)","date":"2025-04-30","objectID":"/hls/:0:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#hlshttp-live-streaming"},{"categories":["Technology"],"content":" ✅ HLS란? HTTP 기반의 비디오 스트리밍 프로토콜로, 애플에서 개발했고 현재 가장 널리 사용돼요. 라이브라는 이름이 있지만 VOD(주문형) 과 라이브 스트리밍 둘 다 지원합니다. 비디오 파일을 잘게 조각(세그먼트) 내서 HTTP로 전송하고, 클라이언트가 조각들을 받아서 순서대로 재생합니다. ","date":"2025-04-30","objectID":"/hls/:1:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-hls란"},{"categories":["Technology"],"content":" ✅ 왜 많이 쓰이나요? HTTP 기반이라 웹 서버로 쉽게 배포 가능 (추가 장비 불필요) 모든 디바이스에서 재생 가능 (모바일, 데스크탑 등) 네트워크 상황에 따라 자동으로 화질 조절 (적응 비트 전송률) ","date":"2025-04-30","objectID":"/hls/:2:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-왜-많이-쓰이나요"},{"categories":["Technology"],"content":" ✅ 어떻게 작동하나요?","date":"2025-04-30","objectID":"/hls/:3:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-어떻게-작동하나요"},{"categories":["Technology"],"content":" 1. 서버 측 작업 인코딩: 다양한 디바이스에서 재생 가능한 포맷(H.264/H.265)으로 변환 세그먼트 분할: 비디오를 6초 정도 길이로 쪼갬 인덱스 파일 생성: 어떤 순서로 세그먼트를 불러올지 기록 여러 화질로 복제: 예) 480p, 720p, 1080p → 적응 비트 전송률용 ","date":"2025-04-30","objectID":"/hls/:3:1","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#1-서버-측-작업"},{"categories":["Technology"],"content":" 2. 배포 보통 CDN이 중간에서 빠르게 전달하고 캐시도 담당 ","date":"2025-04-30","objectID":"/hls/:3:2","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#2-배포"},{"categories":["Technology"],"content":" 3. 클라이언트 인덱스 파일을 보고 세그먼트를 순서대로 요청해서 재생 네트워크에 따라 자동으로 품질 조절 ","date":"2025-04-30","objectID":"/hls/:3:3","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#3-클라이언트"},{"categories":["Technology"],"content":" ✅ 적응 비트 전송률이 뭐예요? 네트워크 상태에 따라 스트리밍 화질을 실시간 조절하는 기능입니다. 느려지면 저화질로 자동 전환해서 끊기지 않게 하고, 좋아지면 고화질로 자동 업그레이드해줍니다. HLS가 미리 다양한 화질로 세그먼트를 만들어 두기 때문에 가능해요. ","date":"2025-04-30","objectID":"/hls/:4:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-적응-비트-전송률이-뭐예요"},{"categories":["Technology"],"content":" ✅ TCP vs UDP? 왜 HLS는 TCP 써요? 대부분의 스트리밍 프로토콜은 빠른 전송을 위해 UDP를 쓰는데, HLS는 신뢰성 있는 전송이 더 중요해서 TCP를 사용합니다. ","date":"2025-04-30","objectID":"/hls/:5:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-tcp-vs-udp-왜-hls는-tcp-써요"},{"categories":["Technology"],"content":" 이유: HTTP = TCP 기반이라 자연스럽게 따라감 실시간성이 아주 중요하지 않음 (몇 초 지연돼도 괜찮음) 인터넷 환경이 좋아져서 TCP 속도도 충분함 적응 비트 전송률이 끊김을 완화해줌 ","date":"2025-04-30","objectID":"/hls/:5:1","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#이유"},{"categories":["Technology"],"content":" 🔁 정리HLS는 HTTP 기반 스트리밍 프로토콜로, 비디오를 몇 초 단위로 쪼개서 전송하는 방식입니다. 모든 디바이스와 서버에서 HTTP를 쓰기 때문에 호환성과 배포가 좋고, 적응 비트 전송률 기능으로 네트워크 상태에 따라 자동 화질 조절이 가능합니다. 다른 프로토콜은 속도 때문에 UDP를 쓰지만, HLS는 HTTP 기반이라 TCP를 사용하고, 실시간성이 아주 중요하지 않기 때문에 문제가 되지 않습니다. ","date":"2025-04-30","objectID":"/hls/:6:0","series":null,"tags":["Streaming"],"title":"HLS(HTTP Live Streaming)","uri":"/hls/#-정리"}]